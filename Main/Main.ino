/* HTTP REQUEST LIBRARIES */
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

/* RFID READER LIBRARIES */
#include <SPI.h>
#include <MFRC522.h>

/* OLED DISPLAY LIBRARIES */
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

/* HTTP REQUEST CONFIGURATION */
const char *ssid = "keyper";
const char *password = "12345678";

String serverIPAddress = "192.168.147.250";
String serverPort = "8080";
String apiPath = "http://" + serverIPAddress + ":" + serverPort + "/api";

String studentPath = apiPath + "/student";
String instructorPath = apiPath + "/instructor";
String buildingPath = apiPath + "/building";
String keyPath = apiPath + "/key";
String roomPath = apiPath + "/room";
String recordPath = apiPath + "/record";

HTTPClient http;
int responseCode;

/* RFID CONFIGURATION */
#define SS_PIN 5
#define RST_PIN 2
const int ipaddress[4] = {103, 97, 67, 25};
byte nuidPICC[4] = {0, 0, 0, 0};
MFRC522::MIFARE_Key key;
MFRC522 rfid = MFRC522(SS_PIN, RST_PIN);

/* OLED DISPLAY CONFIGURATION */
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using I2C
#define OLED_RESET -1 // Reset pin
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

/* UTITLITIES */
const int readingKeyDuration = 10000; // in milliseconds
unsigned long previousReadingKeyTime = 0;
StaticJsonDocument<200> doc;

/* BITMAPS */
const unsigned char logo[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x3E, 0x03, 0x07, 0x80, 0x38, 0x07, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x7C, 0x1F, 0xE3, 0x80, 0x3B, 0x9F, 0xC0, 0x7F, 0x83, 0x9E, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x78, 0x3F, 0xF3, 0xC0, 0x7B, 0xBF, 0xE0, 0xFF, 0xC3, 0xBE, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x71, 0xF0, 0x78, 0x79, 0xC0, 0x73, 0xF8, 0xF1, 0xE1, 0xE3, 0xFE, 0x00, 0x00,
    0x00, 0x00, 0x08, 0xFF, 0xE0, 0xF0, 0x3D, 0xC0, 0x73, 0xE0, 0x3B, 0xC0, 0xF3, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x36, 0x7F, 0xC0, 0xE0, 0x1C, 0xE0, 0x73, 0xC0, 0x1B, 0x80, 0x73, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x41, 0x3F, 0x81, 0xE0, 0x1E, 0xE0, 0x73, 0x80, 0x1F, 0x80, 0x7B, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x9F, 0x81, 0xE0, 0x1E, 0xE0, 0xE3, 0x80, 0x1F, 0x80, 0x7B, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x82, 0x5F, 0x81, 0xFF, 0xFE, 0xE0, 0xE3, 0x80, 0x1F, 0xFF, 0xFB, 0x80, 0x00, 0x00,
    0x00, 0x01, 0x07, 0x5F, 0x81, 0xFF, 0xFE, 0x71, 0xC3, 0x80, 0x1F, 0xFF, 0xFB, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x83, 0x5F, 0xA1, 0xE0, 0x00, 0x71, 0xC3, 0x80, 0x1F, 0x80, 0x03, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x83, 0x1F, 0x21, 0xE0, 0x00, 0x71, 0xC3, 0x80, 0x1F, 0x80, 0x03, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x41, 0xFE, 0x61, 0xE0, 0x00, 0x3B, 0x83, 0xC0, 0x1F, 0x80, 0x03, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x36, 0xFC, 0xF0, 0xF0, 0x1C, 0x3B, 0x83, 0xE0, 0x3B, 0xC0, 0x73, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x08, 0x71, 0xF8, 0xF8, 0x3C, 0x3F, 0x83, 0xF8, 0xF3, 0xE0, 0xF3, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x06, 0x7C, 0x7F, 0xF8, 0x1F, 0x03, 0xBF, 0xE1, 0xFF, 0xE3, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x3E, 0x3F, 0xF0, 0x1F, 0x03, 0x9F, 0xC0, 0xFF, 0xC3, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x1F, 0x0F, 0xE0, 0x0F, 0x03, 0x8F, 0x00, 0x3F, 0x83, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x0F, 0x80, 0x00, 0x0E, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x07, 0xC0, 0x00, 0x1E, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x03, 0xE0, 0x00, 0x3C, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x01, 0xE0, 0x02, 0x7C, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE0, 0x00, 0xE0, 0x03, 0xF8, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char borrowed[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x07, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xE2, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x03, 0x80, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x12, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x04, 0x40, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x12, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0xA1, 0xF2, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x91, 0x02, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x89, 0x11, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x04, 0x40, 0x40, 0x10, 0x80, 0x00, 0x00, 0x00, 0x88, 0xE0, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x03, 0x80, 0x40, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x40, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x42, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x43, 0xC0, 0x80, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x21, 0x81, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x08, 0x01, 0xC0, 0x20, 0x01, 0x00, 0x04, 0x47, 0x13, 0x26, 0x38, 0x82, 0x38, 0x78, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x10, 0x02, 0x00, 0x04, 0x48, 0x94, 0x28, 0x44, 0x82, 0x44, 0x88, 0x00,
    0x00, 0x08, 0x01, 0xC0, 0x0C, 0x0C, 0x00, 0x07, 0x88, 0x98, 0x30, 0x44, 0x92, 0x44, 0x88, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x03, 0xF0, 0x00, 0x04, 0x48, 0x90, 0x20, 0x44, 0x92, 0x7C, 0x88, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x48, 0x90, 0x20, 0x44, 0x92, 0x40, 0x88, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x48, 0x90, 0x20, 0x44, 0x92, 0x44, 0x88, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x87, 0x10, 0x20, 0x38, 0x6C, 0x38, 0x78, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x07, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char requesting[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x11, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x1C, 0x79, 0xE2, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x22, 0x20, 0x82, 0x22, 0x44, 0x00, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x13, 0x22, 0x20, 0x82, 0x22, 0x44, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x11, 0x3E, 0x20, 0x82, 0x22, 0x44, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x11, 0x20, 0x20, 0x82, 0x22, 0x44, 0x00, 0x00, 0x7E, 0x01, 0xFC, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x11, 0x22, 0x20, 0x82, 0x22, 0x3C, 0x00, 0x00, 0x7F, 0xC0, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0F, 0x1C, 0x18, 0x62, 0x22, 0x04, 0x00, 0x00, 0x7F, 0xF0, 0x7E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x7F, 0xF8, 0x3F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x03, 0xFC, 0x1F, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x0F, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x07, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x87, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x83, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x8E, 0x3C, 0x70, 0x00, 0x00, 0x00, 0x0E, 0x07, 0xC3, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x91, 0x10, 0x88, 0x00, 0x00, 0x00, 0x1F, 0x07, 0xC1, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x81, 0x10, 0x08, 0x00, 0x00, 0x00, 0x3F, 0x83, 0xC1, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x8F, 0x10, 0x78, 0x00, 0x00, 0x00, 0x7F, 0xC3, 0xE1, 0xF0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x91, 0x10, 0x88, 0x00, 0x00, 0x00, 0x7F, 0xC1, 0xE1, 0xF0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x08, 0x91, 0x10, 0x88, 0x00, 0x00, 0x00, 0x7F, 0xC1, 0xE1, 0xF0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x3F, 0x81, 0xE1, 0xF0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x01, 0xE1, 0xF0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x01, 0xE1, 0xF0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char invalid[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x07, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x80, 0x80, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x80, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x47, 0x88, 0x8E, 0x10, 0x87, 0x80, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x48, 0x91, 0x10, 0x88, 0x80, 0x00,
    0x00, 0x08, 0x03, 0x80, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x44, 0x48, 0x81, 0x10, 0x88, 0x80, 0x00,
    0x00, 0x08, 0x04, 0x40, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x44, 0x48, 0x8F, 0x10, 0x88, 0x80, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x10, 0x02, 0x00, 0x00, 0x00, 0x44, 0x48, 0x91, 0x10, 0x88, 0x80, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x20, 0x01, 0x00, 0x00, 0x00, 0x44, 0x45, 0x11, 0x10, 0x88, 0x80, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x20, 0x01, 0x00, 0x00, 0x00, 0x44, 0x42, 0x0F, 0x08, 0x87, 0x80, 0x00,
    0x00, 0x08, 0x04, 0x40, 0x42, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x03, 0x80, 0x41, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x40, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x40, 0xC0, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x41, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x22, 0x11, 0x00, 0x00, 0x00, 0x01, 0x1E, 0x3C, 0x44, 0xF0, 0x00, 0x00,
    0x00, 0x08, 0x01, 0xC0, 0x20, 0x01, 0x00, 0x00, 0x00, 0x01, 0x11, 0x22, 0x44, 0x40, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x01, 0x11, 0x22, 0x44, 0x40, 0x00, 0x00,
    0x00, 0x08, 0x01, 0xC0, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x11, 0x22, 0x44, 0x40, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x01, 0x11, 0x22, 0x44, 0x40, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x22, 0x44, 0x40, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x3C, 0x38, 0x30, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x07, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char returned[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x07, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xE2, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x03, 0x80, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x12, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x04, 0x40, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x12, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0xA1, 0xF2, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x20, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x91, 0x02, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x08, 0x20, 0x21, 0x21, 0x00, 0x00, 0x00, 0x00, 0x89, 0x11, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x04, 0x40, 0x41, 0x20, 0x80, 0x00, 0x00, 0x00, 0x88, 0xE0, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x03, 0x80, 0x41, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x43, 0xF0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x42, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x42, 0x10, 0x80, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x22, 0x11, 0x00, 0x01, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x08, 0x01, 0xC0, 0x23, 0xF1, 0x00, 0x01, 0x11, 0xC7, 0x91, 0x26, 0x78, 0x70, 0xF0, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x10, 0x02, 0x00, 0x01, 0x12, 0x22, 0x11, 0x28, 0x44, 0x89, 0x10, 0x00,
    0x00, 0x08, 0x01, 0xC0, 0x0C, 0x0C, 0x00, 0x01, 0xE2, 0x22, 0x11, 0x30, 0x44, 0x89, 0x10, 0x00,
    0x00, 0x08, 0x01, 0x00, 0x03, 0xF0, 0x00, 0x01, 0x43, 0xE2, 0x11, 0x20, 0x44, 0xF9, 0x10, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x02, 0x11, 0x20, 0x44, 0x81, 0x10, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x12, 0x22, 0x11, 0x20, 0x44, 0x89, 0x10, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x11, 0xC1, 0x8E, 0x20, 0x44, 0x70, 0xF0, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x07, 0xE0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char profile[] PROGMEM = {
    0x00, 0x78, 0x00,
    0x03, 0x87, 0x00,
    0x0C, 0x00, 0xC0,
    0x10, 0x00, 0x20,
    0x20, 0x30, 0x10,
    0x20, 0xCC, 0x10,
    0x41, 0x02, 0x08,
    0x41, 0x02, 0x08,
    0x42, 0x01, 0x08,
    0x82, 0x01, 0x04,
    0x81, 0x02, 0x04,
    0x81, 0x02, 0x04,
    0x80, 0xCC, 0x04,
    0x40, 0x78, 0x08,
    0x41, 0x86, 0x08,
    0x42, 0x01, 0x08,
    0x24, 0x00, 0x90,
    0x2C, 0x00, 0xD0,
    0x18, 0x00, 0x60,
    0x0C, 0x00, 0xC0,
    0x03, 0x87, 0x00,
    0x00, 0x78, 0x00};

void setup()
{
    Serial.begin(115200);

    /* WIFI INITIALIZATION */
    WiFi.begin(ssid, password);
    Serial.println("Connecting");
    while (WiFi.status() != WL_CONNECTED)
    {
        delay(500);
        Serial.print(".");
    }
    Serial.println();
    Serial.print("Connected to WiFi network with IP Address: ");
    Serial.println(WiFi.localIP());

    /* RFID INITIALIZATION */
    SPI.begin();
    rfid.PCD_Init();
    Serial.print(F("Reader :"));
    rfid.PCD_DumpVersionToSerial();

    /* OLED DISPLAY INITIALIZATION */
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
    {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;)
            ; // Don't proceed, loop forever
    }
}

void loop()
{
    String rfid = "";
    String studentName = "";
    String studentSchoolId = "";

    while (true)
    {
        displayBitmap("logo");

        rfid = readRFID();
        if (rfid == "")
            continue;

        displayBitmap("requesting");

        Serial.print("RFID hex: ");
        Serial.println(rfid);

        String responseBody = getStudent(rfid);

        bool skipKeyHandling = false;

        if (responseCode == 200)
        {
            String last_name = valueFromJSON(responseBody, "last_name");
            String first_name = valueFromJSON(responseBody, "first_name");
            String full_name = last_name + ", " + first_name;
            String studentSchoolId = valueFromJSON(responseBody, "school_id");

            displayProfile(last_name, studentSchoolId);

            previousReadingKeyTime = millis();
            Serial.println("waiting for rfid tag");

            while (millis() - previousReadingKeyTime <= readingKeyDuration)
            {
                rfid = readRFID();
                if (rfid == "")
                    continue;

                displayBitmap("requesting");

                Serial.print("RFID hex: ");
                Serial.println(rfid);

                String keyResponseBody = getKey(rfid);
                Serial.println(keyResponseBody);

                if (responseCode != 200)
                {
                    displayBitmap("invalid");
                    delay(2000);
                    skipKeyHandling = true;
                    break;
                }

                Serial.println("Key found.");

                if (valueFromJSON(keyResponseBody, "status") == "available")
                {
                    Serial.println("Borrowing key");
                    borrowKey(rfid, studentSchoolId);
                    displayBitmap("borrowed");
                    delay(2000);
                    Serial.println("Key borrowed");
                    skipKeyHandling = true;
                    break;
                }

                if (valueFromJSON(keyResponseBody, "status") == "borrowed")
                {
                    Serial.println("Returning key");
                    returnKey(rfid, studentSchoolId);
                    displayBitmap("returned");
                    delay(2000);
                    Serial.println("Key returned");
                    skipKeyHandling = true;
                    break;
                }
            }
            skipKeyHandling = true;
        }

        if (skipKeyHandling)
            continue;

        Serial.println("Student RFID can't be found.");

        displayBitmap("requesting");

        String keyResponseBody = getKey(rfid);

        if (responseCode != 200)
        {
            Serial.println("Key RFID can't be found.");
            displayBitmap("invalid");
            delay(2000);
            continue;
        }

        if (valueFromJSON(keyResponseBody, "status") == "available")
        {
            displayBitmap("invalid");
            delay(2000);
            continue;
        }

        if (valueFromJSON(keyResponseBody, "status") == "borrowed")
        {
            returnKey(rfid, "");
            displayBitmap("returned");
            delay(2000);
            continue;
        }
    }
}

String sendHTTPGETRequest(String requestPath)
{
    String responseBody = "";

    if (WiFi.status() != WL_CONNECTED)
    {
        Serial.println("Cannot send get request, WiFi Disconnected.");
        return "";
    }

    http.begin(requestPath.c_str());

    responseCode = http.GET();

    if (responseCode <= 0)
    {
        Serial.print("HTTP Error code: ");
        Serial.println(responseCode);
        return "";
    }

    Serial.print("HTTP Response code: ");
    Serial.println(responseCode);
    responseBody = http.getString();

    http.end();

    return responseBody;
}

String sendHTTPPOSTRequest(String requestPath, String postData)
{
    String responseBody = "";

    if (WiFi.status() != WL_CONNECTED)
    {
        Serial.println("Cannot send post request, WiFi Disconnected.");
        return "";
    }

    http.begin(requestPath.c_str());
    http.addHeader("Content-Type", "application/json");
    responseCode = http.POST(postData);

    if (responseCode <= 0)
    {
        Serial.print("HTTP Error code: ");
        Serial.println(responseCode);
        return "";
    }

    Serial.print("HTTP Response code: ");
    Serial.println(responseCode);
    responseBody = http.getString();
    Serial.println(responseBody);

    http.end();

    return responseBody;
}

String readRFID()
{
    String rfidValue = "";
    for (byte i = 0; i < 6; i++)
    {
        key.keyByte[i] = 0xFF;
    }
    // Look for new 1 cards
    if (!rfid.PICC_IsNewCardPresent())
        return "";
    // Verify if the NUID has been readed
    if (!rfid.PICC_ReadCardSerial())
        return "";
    // Store NUID into nuidPICC array
    for (byte i = 0; i < 4; i++)
    {
        nuidPICC[i] = rfid.uid.uidByte[i];
    }
    rfidValue = byteArrToHexString(rfid.uid.uidByte, rfid.uid.size);

    // Halt PICC
    rfid.PICC_HaltA();
    // Stop encryption on PCD
    rfid.PCD_StopCrypto1();

    return rfidValue;
}

String byteArrToHexString(byte *buffer, byte bufferSize)
{
    String hexString = "";

    for (byte i = 0; i < bufferSize; i++)
    {
        if (buffer[i] < 0x10)
        {
            hexString += '0';
            continue;
        }

        hexString += String(buffer[i], HEX);
    }

    return hexString;
}

String getStudent(String rfid)
{
    String requestPath = studentPath + "/" + rfid;
    return sendHTTPGETRequest(requestPath);
}

String getKey(String rfid)
{
    String requestPath = keyPath + "/rfid/" + rfid;
    return sendHTTPGETRequest(requestPath);
}

String borrowKey(String keyRfid, String studentSchoolId)
{
    String postData = "{\"type\": \"borrow\", \"school_id\": \"" + studentSchoolId + "\", \"rfid\": \"" + keyRfid + "\"}";

    return sendHTTPPOSTRequest(recordPath, postData);
}

String returnKey(String keyRfid, String studentSchoolId)
{
    String postData = "{\"type\": \"return\", \"school_id\": \"" + studentSchoolId + "\", \"rfid\": \"" + keyRfid + "\"}";
    return sendHTTPPOSTRequest(recordPath, postData);
}

void deserializeResponseBody(StaticJsonDocument<200> *doc, String responseBody)
{
    // Deserialize the JSON document
    DeserializationError error = deserializeJson(*doc, responseBody);

    // Test if parsing succeeds.
    if (error)
    {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
    }
}

void printToDisplay(String text)
{
    display.clearDisplay();

    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println(text);
    display.display();
}

void displayBitmap(String bitmapToDisplay)
{
    display.clearDisplay();

    if (bitmapToDisplay == "borrowed")
        display.drawBitmap(0, 0, borrowed, 128, 64, WHITE);
    if (bitmapToDisplay == "invalid")
        display.drawBitmap(0, 0, invalid, 128, 64, WHITE);
    if (bitmapToDisplay == "logo")
        display.drawBitmap(0, 0, logo, 128, 64, WHITE);
    if (bitmapToDisplay == "returned")
        display.drawBitmap(0, 0, returned, 128, 64, WHITE);
    if (bitmapToDisplay == "requesting")
        display.drawBitmap(0, 0, requesting, 128, 64, WHITE);

    display.display();
}

String valueFromJSON(String json, String key)
{
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, json);

    // Test if parsing succeeds.
    if (error)
    {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        return "";
    }

    const char *value = doc["data"][key];
    return String(value);
}

void displayProfile(String lastname, String schoolid)
{
    display.clearDisplay();
    display.drawBitmap(8, 21, profile, 22, 22, WHITE);

    display.setTextColor(WHITE);

    if (lastname.length() > 7)
    {
        display.setTextSize(1);
        display.setCursor(36, 20);
        display.print(limitString(lastname, 14));
    }
    else
    {
        display.setTextSize(2);
        display.setCursor(36, 10);
        display.print(limitString(lastname, 7));
    }

    if (schoolid.length() > 7)
    {
        display.setTextSize(1);
        display.setCursor(36, 34);
        display.print(limitString(schoolid, 14));
    }
    else
    {
        display.setTextSize(2);
        display.setCursor(36, 34);
        display.print(limitString(schoolid, 7));
    }

    display.display();
}

String limitString(String input, int maxLength)
{
    String result = input;
    if (result.length() > maxLength)
    {
        result = result.substring(0, maxLength); // Truncate the string to the maximum length
        if (maxLength >= 2)
        {
            result.remove(maxLength - 2); // Remove the last two characters
            result += "..";               // Append ".." to the string
        }
    }
    return result;
}